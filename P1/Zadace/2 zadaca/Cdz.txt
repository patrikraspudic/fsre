1. ZADATAK

int broj, i, zbroj = 0;: Ovdje deklariramo tri varijable tipa int (cijeli broj). Varijabla broj će se koristiti za pohranu broja koji korisnik unese, i je brojač za petlju, a zbroj je varijabla u kojoj ćemo pohraniti zbroj svih djelitelja unesenog broja.

printf("Unesite prirodni broj: ");: Ova linija koda ispisuje poruku koja traži od korisnika da unese prirodni broj.

scanf("%d", &broj);: Ova linija koda čita broj koji korisnik unese i pohranjuje ga u varijablu broj.

for(i = 1; i <= broj; i++) { ... }: Ova for petlja prolazi kroz sve brojeve od 1 do unesenog broja.

if(broj % i == 0) { ... }: Ova if naredba provjerava je li trenutni broj i djelitelj unesenog broja. Ako je ostatak dijeljenja unesenog broja s i jednak 0, to znači da je i djelitelj unesenog broja.

zbroj += i;: Ako je i djelitelj unesenog broja, dodaje se na zbroj.

if(zbroj > broj + 1) { ... } else { ... }: Na kraju, ako je zbroj veći od unesenog broja plus 1 (jer smo uključili i sam broj u zbroj), program ispisuje da je broj složen i ispisuje zbroj svih njegovih djelitelja. Ako zbroj nije veći, program ispisuje da broj nije složen.

---------------------------------------------------------------------------------------

2. ZADATAK

char c; int broj_samoglasnika = 0;: Ovdje deklariramo dvije varijable. Varijabla c tipa char će se koristiti za pohranu znaka koji korisnik unese, a broj_samoglasnika tipa int je brojač koji će brojati koliko je uneseno samoglasnika.

printf("Unesite znakove (unesite * za kraj): \n");: Ova linija koda ispisuje poruku koja traži od korisnika da unese znakove.

while (scanf(" %c", &c), c != '*') { ... }: Ova while petlja čita znakove koje korisnik unese sve dok se ne unese znak ‘'. scanf(" %c", &ch) čita jedan znak koji korisnik unese i pohranjuje ga u varijablu c. Petlja se nastavlja sve dok uneseni znak nije '’.

if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') { ... }: Ova if naredba provjerava je li uneseni znak samoglasnik. Ako je uneseni znak jedan od samoglasnika (bilo malo ili veliko slovo), izvršava se kod unutar { ... }.

broj_samoglasnika++;: Ako je uneseni znak samoglasnik, povećava se brojač broj_samoglasnika.

printf("Broj unesenih samoglasnika je: %d\n", broj_samoglasnika);: Na kraju, program ispisuje ukupan broj unesenih samoglasnika.

------------------------------------------------------------------------------------------

3. ZADATAK

float broj, prethodni_broj = 0.0; deklarira dvije varijable tipa float. broj je varijabla u koju će se pohraniti trenutno uneseni broj, a prethodni_broj je varijabla koja pohranjuje prethodno uneseni broj. prethodni_broj je inicijaliziran na 0.

int brojac_negativnih = 0; deklarira brojač negativnih brojeva i inicijalizira ga na 0.

float suma_negativnih = 0.0; deklarira varijablu koja će pohraniti sumu svih unesenih negativnih brojeva. Inicijalizirana je na 0.

int prvi_unos = 1; deklarira varijablu koja označava je li trenutni unos prvi unos korisnika. Inicijalizirana je na 1 (istina).

do { ... } while(1); je petlja koja se izvodi beskonačno, sve dok se ne prekine iznutra.

scanf("%f", &broj); čita broj koji korisnik unosi.

if((int)broj == (int)prethodni_broj && prvi_unos == 0) { break; } provjerava je li cijeli dio trenutno unesenog broja jednak cijelom dijelu prethodno unesenog broja. Ako jest, i ako trenutni unos nije prvi unos, petlja se prekida.

if(broj < 0) { suma_negativnih += broj; brojac_negativnih++; } provjerava je li trenutno uneseni broj negativan. Ako jest, dodaje ga u sumu negativnih brojeva i povećava brojač negativnih brojeva.

prethodni_broj = broj; postavlja prethodni broj na trenutno uneseni broj.

prvi_unos = 0; postavlja varijablu prvi_unos na 0 (netočno), označavajući da je prvi unos završen.

if(brojac_negativnih > 0) { printf("Prosjek negativnih unesenih brojeva je: %.2f\n", suma_negativnih / brojac_negativnih); } else { printf("Nije unesen niti jedan negativan broj.\n"); } na kraju, ako su uneseni negativni brojevi, program izračunava prosjek svih unesenih negativnih brojeva i ispisuje ga. Ako nisu uneseni negativni brojevi, program ispisuje poruku da niti jedan negativan broj nije unesen.

----------------------------------------------------------------------------------------------

4. ZADATAK

char c; deklarira varijablu c tipa char koja će pohraniti trenutno uneseno slovo.

int broj_samoglasnika = 0; deklarira brojač samoglasnika i inicijalizira ga na 0.

int broj_suglasnika = 0; deklarira brojač suglasnika i inicijalizira ga na 0.

int broj_unesenih_slova = 0; deklarira brojač unesenih slova i inicijalizira ga na 0.

while (broj_unesenih_slova < 20) { ... } je petlja koja se izvodi dok broj unesenih slova ne dosegne 20.

scanf(" %c", &c); čita slovo koje korisnik unosi.

if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) { ... } provjerava je li uneseno slovo englesko slovo (malim ili velikim slovima).

if (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' || c == 'O' || c == 'u' || c == 'U') { broj_samoglasnika++; } else { broj_suglasnika++; } provjerava je li uneseno slovo samoglasnik. Ako jest, povećava brojač samoglasnika. Ako nije, povećava brojač suglasnika.

printf("Broj unesenih samoglasnika je: %d\n", broj_samoglasnika); i printf("Broj unesenih suglasnika je: %d\n", broj_suglasnika); na kraju, program ispisuje broj unesenih samoglasnika i suglasnika.

------------------------------------------------------------------------------------------------

5. ZADATAK

void prikaziZapise(int dcb) { ... } je funkcija koja prikazuje uneseni dekadski broj u binarnom, oktalnom i heksadecimalnom formatu.

printf("Binarno: "); for (int i = 7; i >= 0; i--) { printf("%d", (dcb >> i) & 1); } ispisuje binarni zapis unesenog broja. Koristi se bitovni pomak udesno (>>) i bitovni AND (&) za izoliranje svake biti unesenog broja.

printf("\nOktalno: "); int oktalniZapis[3]; ... ispisuje oktalni zapis unesenog broja. Koristi se operator ostatak (%) i operator dijeljenje (/) za izračunavanje svake cifre oktalnog zapisa.

printf("\nHeksadecimalno: "); char heksCifre[] = "0123456789ABCDEF"; ... ispisuje heksadecimalni zapis unesenog broja. Koristi se operator ostatak (%) i operator dijeljenje (/) za izračunavanje svake cifre heksadecimalnog zapisa.

int main() { ... } je glavna funkcija programa. Traži od korisnika da unese dekadski broj i poziva funkciju prikaziZapise ako je uneseni broj u intervalu [0, 255].

----------------------------------------------------------------------------------------------

5. ZADATAK DRUGI NACIN

void print_binary(int n): Ova linija definira funkciju print_binary koja prima cijeli broj n kao argument. Ova funkcija će ispisati binarni ekvivalent broja n.

if (n > 1) { print_binary(n/2); }: Ova linija je dio rekurzivne funkcije koja dijeli broj n sa 2 sve dok n ne postane 1 ili 0. Ovo je prvi korak u pretvaranju dekadskog broja u binarni.

printf("%d", n % 2);: Ova linija ispisuje ostatak dijeljenja broja n sa 2, što je ili 0 ili 1. Ovo je drugi korak u pretvaranju dekadskog broja u binarni.

int main() { ... }: Ova linija definira glavnu funkciju programa. Sve između { i } je tijelo glavne funkcije.

printf("Unesite dekadski cijeli broj iz intervala [0, 255]: ");: Ova linija ispisuje poruku koja traži od korisnika da unese dekadski broj između 0 i 255.

scanf("%d", &dcb);: Ova linija čita broj koji korisnik unese i sprema ga u varijablu dcb.

if(dcb < 0 || dcb > 255) { ... }: Ova linija provjerava je li uneseni broj izvan zadanog intervala. Ako jest, ispisuje se poruka o grešci i program se završava.

printf("Dekadski broj %d u bazi 2 je: ", dcb); print_binary(dcb); printf("\n");: Ove linije ispisuju binarni ekvivalent unesenog broja.

printf("Dekadski broj %d u bazi 8 je: %o\n", dcb, dcb);: Ova linija ispisuje oktalni ekvivalent unesenog broja.

printf("Dekadski broj %d u bazi 16 je: %x\n", dcb, dcb);: Ova linija ispisuje heksadecimalni ekvivalent unesenog broja.































































